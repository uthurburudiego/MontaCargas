/*
Diego Uthurburu 1B
*/
#define A 10
#define B 11
#define C 2
#define D 3
#define E 4
#define F 9
#define G 8
#define LED_RED 7
#define LED_GREEN 6
#define UP A3
#define DOWN A2
#define STOP A1

#define TRAYECTO 3000

long int tiempo_actual;
long int tiempo_anterior=0;
int piso = 0;
int estado_up;
int estado_down;
int estado_stop;

void setup()
{
  pinMode(A, OUTPUT);
  pinMode(B, OUTPUT);
  pinMode(C, OUTPUT);
  pinMode(D, OUTPUT);
  pinMode(E, OUTPUT);
  pinMode(F, OUTPUT);
  pinMode(G, OUTPUT);
  pinMode(LED_RED, OUTPUT);
  pinMode(LED_GREEN, OUTPUT);
  pinMode(UP, INPUT_PULLUP);
  pinMode(DOWN, INPUT_PULLUP);
  pinMode(STOP, INPUT_PULLUP);
  Serial.begin(9600);
}


void loop()
{
	//AQUI SE LEE EL ESTADO DE CADA BOTON Y SE GUARDA EN UNA VARIABLE 
  estado_up = digitalRead(UP);
  estado_down = digitalRead(DOWN);
  estado_stop = digitalRead(STOP);
  
//	ACA ESTA TODO EL MANEJO DEL BOTON UP
  while(estado_up == LOW)
  {
    tiempo_actual= millis();
  	enceder(LED_GREEN);
    apagar(LED_RED);
    if( tiempo_actual - tiempo_anterior >= TRAYECTO)
    {
      piso++;
      mostrar_piso(piso);
      mostrar_piso("Usted esta subiendo al piso:",piso);
      delay(50);
      tiempo_anterior = tiempo_actual ;
    }
      	//SALIDA DEL BUCLE
    if(digitalRead(DOWN)== LOW || digitalRead(STOP)== LOW)
    {
      break;
    }
      if(piso >=9)
    {
      enceder(LED_RED);
      apagar(LED_GREEN);
      mostrar_piso("Este es el ultimo piso:",piso);
      break;
    }
  }
  ////	ACA ESTA TODO EL MANEJO DEL BOTON STOP
  if(digitalRead(STOP)== LOW)
  {
  	enceder(LED_RED);
    apagar(LED_GREEN);
    mostrar_piso("Usted esta detenido en el piso:",piso);
  }
  //	ACA ESTA TODO EL MANEJO DEL BOTON DOWN
  while(estado_down == LOW)
  {
    tiempo_actual= millis();
  	enceder(LED_GREEN);
    apagar(LED_RED);
  	if( tiempo_actual - tiempo_anterior >= TRAYECTO)
    {
      piso--;
      mostrar_piso(piso);
      delay(50);
      mostrar_piso("Usted esta bajando al piso:",piso);
      tiempo_anterior = tiempo_actual ;
    }
    	//SALIDA DEL BUCLE
     if(digitalRead(UP)== LOW || digitalRead(STOP)== LOW)
    {
      break;
     }
    
    if(piso <=0)
    {
      enceder(LED_RED);
      apagar(LED_GREEN);
      mostrar_piso("Este es el primer piso:",piso);
       break;
    }
  }
}

void enceder(int led)
{
  digitalWrite(led, HIGH);
}
void apagar(int led)
{
	digitalWrite(led, LOW);
}
/**
 * Enciende un display de 7 segmentos mediante la configuración de sus pines.
 *
 * @param a Estado del pin A (segmento a). Puede ser HIGH o LOW.
 * @param b Estado del pin B (segmento b). Puede ser HIGH o LOW.
 * @param c Estado del pin C (segmento c). Puede ser HIGH o LOW.
 * @param d Estado del pin D (segmento d). Puede ser HIGH o LOW.
 * @param e Estado del pin E (segmento e). Puede ser HIGH o LOW.
 * @param f Estado del pin F (segmento f). Puede ser HIGH o LOW.
 * @param g Estado del pin G (segmento g). Puede ser HIGH o LOW.
 */
void encender_display(int a, int b, int c, int d, int e, int f, int g)
{
	digitalWrite(A, a);
  	digitalWrite(B, b);
  	digitalWrite(C, c);
  	digitalWrite(D, d);
  	digitalWrite(E, e);
  	digitalWrite(F, f);
  	digitalWrite(G, g);
}
/**
 * Muestra un número de piso en un display de 7 segmentos.
 *
 * @param piso El número de piso a mostrar (0-9).
 */
void mostrar_piso(int piso)
{
  switch(piso)
  {
 	case 1:
    	encender_display(LOW,HIGH,HIGH,LOW,LOW,LOW,LOW);
    	break;
    case 2:
    	encender_display(HIGH,HIGH,LOW,HIGH,HIGH,LOW,HIGH);
    	break;
    case 3:
    	encender_display(HIGH,HIGH,HIGH,HIGH,LOW,LOW,HIGH);
    	break;
    case 4:
    	encender_display(LOW,HIGH,HIGH,LOW,LOW,HIGH,HIGH);
    	break;
    case 5:
    	encender_display(HIGH,LOW,HIGH,HIGH,LOW,HIGH,HIGH);
    	break;
    case 6:
    	encender_display(LOW,LOW,HIGH,HIGH,HIGH,HIGH,HIGH);
    	break;
    case 7:
    	encender_display(HIGH,HIGH,HIGH,LOW,LOW,LOW,LOW);
    	break;
    case 8:
    	encender_display(HIGH,HIGH,HIGH,HIGH,HIGH,HIGH,HIGH);
    	break;
    case 9:
    	encender_display(HIGH,HIGH,HIGH,LOW,LOW,HIGH,HIGH);
    	break;
    case 0:
    	encender_display(HIGH,HIGH,HIGH,HIGH,HIGH,HIGH,LOW);
    	break;
  }
}
void mostrar_piso(const char* mensaje, int numero_piso)
{
  char texto[300]; // Tamaño suficiente para almacenar el mensaje concatenado
  
  // Formatea la cadena con el mensaje y el número de piso
  sprintf(texto, "%s %d", mensaje, numero_piso);
  
  // Imprime el resultado
  Serial.println(texto);
}
